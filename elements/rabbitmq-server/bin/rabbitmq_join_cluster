#!/bin/bash
set -eu
set -o pipefail

SCRIPT_NAME="$(basename $0)"

function show_options () {
    echo "Usage: ${SCRIPT_NAME} [options]"
    echo "Tells the local RabbitMQ to join the remote node's cluster."
    echo "Options:"
    echo "    --remote-node <NODENAME> - The Rabbit remote node name to use."
    echo "                               Defaults to rabbit."
    echo "    --remote-host <HOSTNAME> - The Rabbit remote host name to use."
    exit ${1}
}

# RabbitMQ database is tied to the system hostname.
LOCAL_HOST="$(hostname)"
REMOTE_NODE="rabbit"
REMOTE_HOST=""

TEMP=$(getopt -o h -l help,remote-node:,remote-host: -n "${SCRIPT_NAME}" -- "${@}")
[ ${?} -ne 0 ] && { echo "Terminating..." >&2; exit 1; };

# Note the quotes around "$TEMP": they are essential!
eval set -- "${TEMP}"

while true ; do
    case "${1}" in
        --remote-node) REMOTE_NODE="${2}"; shift 2 ;;
        --remote-host) REMOTE_HOST="${2}"; shift 2 ;;
        -h | --help) show_options 0 ;;
        --) shift ; break ;;
        *) echo "Error: unsupported option ${1}." >&2 ; exit 1 ;;
    esac
done


function join_cluster_with() {
    local remote_node="${1}"
    local remote_host="${2}"
    rabbitmqctl stop_app
    # We could already be in a cluster with this node so do not fail.
    rabbitmqctl join_cluster "${remote_node}@${remote_host}" 2>/dev/null || true
    rabbitmqctl start_app
}

[ -z "${REMOTE_HOST}" ] && { echo "Failed: A remote host must be given" >&2; exit 255; }

# Check not already clustered with the remote host.
if ! rabbitmq_is_in_cluster --check-host "${REMOTE_HOST}"; then
    { join_cluster_with "${REMOTE_NODE}" "${REMOTE_HOST}" &&
        rabbitmq_is_in_cluster --check-host "${REMOTE_HOST}"; } ||
            RET_VAL=${?}

    if [ ${RET_VAL:-0} -ne 0 ]; then
        echo "Failed to join host [${LOCAL_HOST}] with [${REMOTE_NODE}@${REMOTE_HOST}]..." >&2
        exit ${RET_VAL}
    fi
fi
